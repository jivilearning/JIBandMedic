//IMU
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
Adafruit_BNO055 bno = Adafruit_BNO055(55);

//EMG
#if defined(ARDUINO) && ARDUINO >= 100
#include "Arduino.h"
#else
//#include "WProgram.h"
#endif
#include "EMGFilters.h"
//#include "itoa.h"
//#include "/Users/NiiArmah/GravityEMG/data/Arduino.h"

#define TIMING_DEBUG 1;
#define SensorInputPin0 A0; // input pin number
#define SensorInputPin1 A1;
#define SensorInputPin2 A2;
#define SensorInputPin3 A3;

EMGFilters myFilter0;
EMGFilters myFilter1;
EMGFilters myFilter2;
EMGFilters myFilter3;
// discrete filters must works with fixed sample frequence
// our emg filter only support "SAMPLE_FREQ_500HZ" or "SAMPLE_FREQ_1000HZ"
// other sampleRate inputs will bypass all the EMG_FILTER
//int sampleRate = SAMPLE_FREQ_1000HZ;
enum SAMPLE_FREQUENCY sampleRate = SAMPLE_FREQ_1000HZ;
// For countries where power transmission is at 50 Hz
// For countries where power transmission is at 60 Hz, need to change to
// "NOTCH_FREQ_60HZ"
// our emg filter only support 50Hz and 60Hz input
// other inputs will bypass all the EMG_FILTER
enum NOTCH_FREQUENCY humFreq = NOTCH_FREQ_50HZ;
//enum NOTCH_FREQUENCY humFreq = NOTCH_FREQ_50HZ;
// Calibration:
// put on the sensors, and release your muscles;
// wait a few seconds, and select the max value as the threshold;
// any value under threshold will be set to zero
static int Threshold = 0;

unsigned long timeStamp;
unsigned long timeBudget;

void setup(void) 
{
  //IMU
  Serial.begin(9600);
  Serial.println("Orientation Sensor Test"); Serial.println("");
  
  /* Initialise the sensor */
  if(!bno.begin())
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
    while(1);
  }
  
  delay(1000);
    
  bno.setExtCrystalUse(true);

//EMG
 LL_RCC_ForceCM4Boot();
    /* add setup code here */
    myFilter0.init(sampleRate, humFreq, true, true, true);
    myFilter1.init(sampleRate, humFreq, true, true, true);
    myFilter2.init(sampleRate, humFreq, true, true, true);
    myFilter3.init(sampleRate, humFreq, true, true, true);

    // open serial
    Serial.begin(115200);

    // setup for time cost measure
    // using micros()
    timeBudget = 1e6/sampleRate;
    // micros will overflow and auto return to zero every 70 minutes

}

void loop(void) 
{
  //IMU
  /* Get a new sensor event */ 
  sensors_event_t event; 
  bno.getEvent(&event);
  
  /* Display the floating point data */
  Serial.print("X: ");
  Serial.print(event.orientation.x, 4);
  Serial.print("\tY: ");
  Serial.print(event.orientation.y, 4);
  Serial.print("\tZ: ");
  Serial.print(event.orientation.z, 4);
  Serial.print(" ");
  
  delay(100);

//EMG
     /* add main program code here */
    // In order to make sure the ADC sample frequence on arduino,
    // the time cost should be measured each loop
    /*------------start here-------------------*/
    timeStamp = micros();

    int Value0 = analogRead(A0);
    int Value1 = analogRead(A1);
    int Value2 = analogRead(A2);
    int Value3 = analogRead(A3);

    // filter processing
    int DataAfterFilter0 = myFilter0.update(Value0);
    int DataAfterFilter1 = myFilter1.update(Value1);
    int DataAfterFilter2 = myFilter2.update(Value2);
    int DataAfterFilter3 = myFilter3.update(Value3);

    int envlope0 = sq(DataAfterFilter0);
    int envlope1 = sq(DataAfterFilter1);
    int envlope2 = sq(DataAfterFilter2);
    int envlope3 = sq(DataAfterFilter3);
    // any value under threshold will be set to zero
    envlope0 = (envlope0 > Threshold) ? envlope0 : 0;
    envlope1 = (envlope1 > Threshold) ? envlope1 : 0;
    envlope2 = (envlope2 > Threshold) ? envlope2 : 0;
    envlope3 = (envlope3 > Threshold) ? envlope3 : 0;

    timeStamp = micros() - timeStamp;
    if (TIMING_DEBUG 1) {
        // Serial.print("Read Data: "); Serial.println(Value);
        // Serial.print("Filtered Data: ");Serial.println(DataAfterFilter);
        Serial.print("EMG0: ");
        Serial.print(envlope0);
        Serial.print("  ");
        Serial.print("EMG1: ");
        Serial.print(envlope1);
        Serial.print("  ");
        Serial.print("EMG2: ");
        Serial.print(envlope2);
        Serial.print("  ");
        Serial.print("EMG3: ");
        Serial.println(envlope3);
        //Serial.print("Filters cost time: "); Serial.println(timeStamp);
        // the filter cost average around 520 us
}

    /*------------end here---------------------*/
    // if less than timeBudget, then you still have (timeBudget - timeStamp) to
    // do your work
    delayMicroseconds(90000);
    // if more than timeBudget, the sample rate need to reduce to
    // SAMPLE_FREQ_500HZ
}
