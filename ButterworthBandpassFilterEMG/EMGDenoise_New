package jiBand;



import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.swing.JFrame;

import org.knowm.xchart.QuickChart;
import org.knowm.xchart.SwingWrapper;
import org.knowm.xchart.XYChart;

public class EMGDenoise_new {

    private static int lowCutoffFrequency = 20;  // Adjust as needed
    private static int highCutoffFrequency = 500;  // Adjust as needed

    public static void main(String[] args) throws IOException {
        // Load EMG data from a CSV or TXT file
        String filePath = "/Users/NiiArmah/EMG Denoise Test Files/010L_8.csv";  // Update with your file path
        int[] emgData = readDataFromFile(filePath);
        String filterFilePath = "/Users/NiiArmah/EMG Denoise Test Files/010L_8F.csv";
        
        System.out.println("Creating Original Chart...");
        // Plot original EMG data in 2D
       // plot2D("Original EMG Data", "Time", "Amplitude", emgData);
        //System.out.println("Original Chart created successfully!");

        // Apply Butterworth bandpass filter
        ButterworthBandpassFilter2 bandpassFilter = new ButterworthBandpassFilter2(4, lowCutoffFrequency, highCutoffFrequency);
        int samplingFrequency = 1000;  // Assuming 1000 Hz sampling frequency
        int[] filteredData = bandpassFilter.filter(emgData, samplingFrequency);

        //Write the conents of the filterdata to a new file
        writeArrayToFile(filteredData, filterFilePath);
        System.out.println("Array contents have been written to the file: " + filePath);
        
        // Plot filtered EMG data in 2D
        //plot2D("Filtered EMG Data", "Time", "Amplitude", filteredData);
       // System.out.println("Filtered Chart created successfully!");
        
     // Ensure that the application exits properly after the SwingWrapper is closed
       // System.exit(0);
    }

    
    private static int[] readDataFromFile(String filePath) throws IOException {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            ArrayList<Integer> dataList = new ArrayList<>();
            while ((line = br.readLine()) != null) {
                try {
                    // Parse the content and add to the ArrayList
                    String[] values = line.trim().split(",");
                    for (String value : values) {
                        dataList.add(Integer.parseInt(value));
                    }
                } catch (NumberFormatException e) {
                    // Log the error and continue reading the next line
                    System.err.println("Error parsing line: " + line);
                    e.printStackTrace();
                }
            }
            // Convert ArrayList to int array
            int[] dataArray = new int[dataList.size()];
            for (int i = 0; i < dataList.size(); i++) {
                dataArray[i] = dataList.get(i);
            }
            return dataArray;
        }
    }

    private static void plot2D(String title, String xAxisLabel, String yAxisLabel, int[] data) {
        double[] xData = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            xData[i] = i;  // Assuming time is represented by the index
        }
        XYChart chart = QuickChart.getChart(title, xAxisLabel, yAxisLabel, "EMG Data", xData, toDoubleArray(data));
        SwingWrapper<?> wrapper = new SwingWrapper<>(chart);
        wrapper.displayChart();
        
        // Retrieve the frame and set the default close operation
        javax.swing.JFrame frame = (javax.swing.JFrame)javax.swing.SwingUtilities.getWindowAncestor(wrapper.getXChartPanel());
        frame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    }

    private static double[] toDoubleArray(int[] array) {
        double[] doubleArray = new double[array.length];
        for (int i = 0; i < array.length; i++) {
            doubleArray[i] = array[i];
        }
        return doubleArray;
    }
 /*   
    public static void write (String filename, int[]x) throws IOException{
    	  BufferedWriter outputWriter = null;
    	  outputWriter = new BufferedWriter(new FileWriter(filename));
    	  for (int i = 0; i < x.length; i++) {
    	    // Maybe:
    	    outputWriter.write(x[i]+"");
    	    // Or:
    	    outputWriter.write(Integer.toString(x[i]));
    	    outputWriter.newLine();
    	  }
    	  outputWriter.flush();  
    	  outputWriter.close();  
    	}
    */
    public static void writeArrayToFile(int[] array, String filePath) {
        try {
            File file = new File(filePath);
            FileWriter writer = new FileWriter(file);

            // Write each element of the array to the file
            for (int i = 0; i < array.length; i++) {
                writer.write(Integer.toString(array[i]));
                // Add a newline after each element except for the last one
                if (i < array.length - 1) {
                    writer.write(System.lineSeparator());
                }
            }

            // Close the FileWriter
            writer.close();
        } catch (IOException e) {
            System.out.println("An error occurred while writing to the file: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
}
